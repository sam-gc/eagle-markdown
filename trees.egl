import stringbuilder.egl

export (class) '*'

extern func strdup(byte*) : byte*
extern func free(any*)
extern func sprintf(byte*, byte*...) : int
extern func printf(byte*...) : int

export
interface Tree
{
    -- Render will return an allocated buffer that
    -- should be freed by the caller
    func render(StringBuilder^)
}

class BasicTree (Tree)
{
    Tree^ n
    
    func render(StringBuilder^ sb)
    {
        sb
    }
}

class SubTree (Tree)
{
    Tree^ n
    Tree^ content

    init(Tree^ content)
    {
        self.content = content
    }

    func render(StringBuilder^ sb)
    {
        renderTreeList(self.content, sb)
    }
}

class TextTree (Tree)
{
    Tree^ n
    byte* buff 
    
    init(byte* buff, bool copy)
    {
        self.buff = copy ? strdup(buff) : buff
        -- printf('%p %s\n', self, buff)
    }
    
    destruct()
    {
        free(self.buff)
    }
    
    func render(StringBuilder^ sb)
    {
        sb.appStr(self.buff)
    }
}

-*class ListNodeTree (Tree)
{
    Tree^ n
    Tree^ content
    int level
    
    init(Tree^ content, int level)
    {
        
    }
}*-

class HeaderTree (Tree)
{
    Tree^ n
    Tree^ content
    int level
    
    init(Tree^ content, int level)
    {
        self.content = content
        self.level = level
    }
    
    func render(StringBuilder^ sb)
    {
        byte[5] front
        byte[6] back
        
        sprintf(front, '<h%d>', self.level)
        sprintf(back, '</h%d>', self.level)
        
        sb.appStr(front)
        renderTreeList(self.content, sb)
        sb.appStr(back)
    }
}

class ParagraphTree (Tree)
{
    Tree^ n
    Tree^ content

    init(Tree^ content)
    {
        self.content = content
    }

    func render(StringBuilder^ sb)
    {
        sb.appStr('<p>')
        renderTreeList(self.content, sb)
        sb.appStr('</p>\n')
    }
}

export
enum FormatType
{
    Bold
    Italic
}

class FormatTree (Tree)
{
    Tree^ n
    Tree^ content
    FormatType ft

    
    init(Tree^ content, FormatType ft)
    {
        self.content = content
        self.ft = ft
    }
    
    func render(StringBuilder^ sb)
    {
        byte f 
        switch self.ft
        {
            case Bold
                f = `b`
            case Italic
                f = `i`
        }
        
        byte[4] front
        byte[5] back
        
        sprintf(front, '<%c>', int@f)
        sprintf(back, '</%c>', int@f)
        
        sb.appStr(front)
        renderTreeList(self.content, sb)
        sb.appStr(back)
    }
}

export
func renderTreeList(Tree^ t, StringBuilder^ sb)
{
    for t; t; t = (BasicTree^@t).n
    {
        t.render(sb)
    }
}
